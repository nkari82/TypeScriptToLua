// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LuaIterable with LuaMultiReturn value type invalid LuaIterable<LuaMultiReturn> without destructuring ("for (const s of testIterable()) {}"): code 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function testIterable()
        local strsArray = {{"a1", {a = "a"}}, {"b1", {a = "b"}}, {"c1", {a = "c"}}}
        local i = 0
        return function()
            local ____i_0 = i
            i = ____i_0 + 1
            local strs = strsArray[____i_0 + 1]
            if strs then
                return table.unpack(strs)
            end
        end
    end
    for ____ in testIterable() do
    end
end
return ____exports"
`;

exports[`LuaIterable with LuaMultiReturn value type invalid LuaIterable<LuaMultiReturn> without destructuring ("for (const s of testIterable()) {}"): diagnostics 1`] = `"main.ts(14,24): error TSTL: LuaIterable with a LuaMultiReturn return value type must be destructured."`;

exports[`LuaIterable with LuaMultiReturn value type invalid LuaIterable<LuaMultiReturn> without destructuring ("let s; for (s of testIterable()) {}"): code 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function testIterable()
        local strsArray = {{"a1", {a = "a"}}, {"b1", {a = "b"}}, {"c1", {a = "c"}}}
        local i = 0
        return function()
            local ____i_0 = i
            i = ____i_0 + 1
            local strs = strsArray[____i_0 + 1]
            if strs then
                return table.unpack(strs)
            end
        end
    end
    local s
    for ____ in testIterable() do
    end
end
return ____exports"
`;

exports[`LuaIterable with LuaMultiReturn value type invalid LuaIterable<LuaMultiReturn> without destructuring ("let s; for (s of testIterable()) {}"): diagnostics 1`] = `"main.ts(14,25): error TSTL: LuaIterable with a LuaMultiReturn return value type must be destructured."`;
