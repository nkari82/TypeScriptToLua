// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`disallow LuaMultiReturn non-numeric access: code 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function multi(self, ...)
        return ...
    end
    return select(
        "forEach",
        multi(nil)
    )
end
return ____exports"
`;

exports[`disallow LuaMultiReturn non-numeric access: code 2`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function multi(self, ...)
        return ...
    end
    return ({multi(nil)}).forEach
end
return ____exports"
`;

exports[`disallow LuaMultiReturn non-numeric access: diagnostics 1`] = `"main.ts(7,16): error TSTL: The LuaMultiReturn type can only be accessed via an element access expression of a numeric type."`;

exports[`disallow LuaMultiReturn non-numeric access: diagnostics 2`] = `"main.ts(7,16): error TSTL: The LuaMultiReturn type can only be accessed via an element access expression of a numeric type."`;

exports[`invalid $multi call ($multi()): code 1`] = `"____(_G)"`;

exports[`invalid $multi call ($multi()): diagnostics 1`] = `"main.ts(2,9): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call ($multi): code 1`] = `"local ____ = ____"`;

exports[`invalid $multi call ($multi): diagnostics 1`] = `"main.ts(2,9): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call (([a] = $multi(1)) => {}): code 1`] = `
"local function ____(____, ____bindingPattern0)
    if ____bindingPattern0 == nil then
        ____bindingPattern0 = {____(_G, 1)}
    end
    local a = ____bindingPattern0[1]
end"
`;

exports[`invalid $multi call (([a] = $multi(1)) => {}): diagnostics 1`] = `"main.ts(2,16): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call (({ $multi });): code 1`] = `"local ____ = {["$multi"] = ____}"`;

exports[`invalid $multi call (({ $multi });): diagnostics 1`] = `"main.ts(2,12): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call (const [a = 0] = $multi()): code 1`] = `
"a = ____(_G)
if a == nil then
    a = 0
end"
`;

exports[`invalid $multi call (const [a = 0] = $multi()): diagnostics 1`] = `"main.ts(2,25): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call (const {} = $multi();): code 1`] = `"local ____temp_0 = {{____(_G)}}"`;

exports[`invalid $multi call (const {} = $multi();): diagnostics 1`] = `"main.ts(2,20): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi call (const a = $multi();): code 1`] = `"a = {____(_G)}"`;

exports[`invalid $multi call (const a = $multi();): diagnostics 1`] = `"main.ts(2,19): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid $multi implicit cast: code 1`] = `
"function badMulti(self)
    return "foo", 42
end"
`;

exports[`invalid $multi implicit cast: diagnostics 1`] = `"main.ts(3,20): error TSTL: The $multi function cannot be cast to a non-LuaMultiReturn type."`;

exports[`invalid direct $multi function use (const [a = 1] = $multi()): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a = ____(nil)
if a == nil then
    a = 1
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a = 1] = $multi()): diagnostics 1`] = `"main.ts(7,25): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (const [a = 1] = $multi(2)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a = ____(nil, 2)
if a == nil then
    a = 1
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a = 1] = $multi(2)): diagnostics 1`] = `"main.ts(7,25): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (const [a] = $multi()): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a = ____(nil)
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a] = $multi()): diagnostics 1`] = `"main.ts(7,21): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (const [a] = $multi(1)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a = ____(nil, 1)
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a] = $multi(1)): diagnostics 1`] = `"main.ts(7,21): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (const _ = null, [a] = $multi(1)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local _ = nil
local a = ____(nil, 1)
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const _ = null, [a] = $multi(1)): diagnostics 1`] = `"main.ts(7,31): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (const ar = [1]; const [a] = $multi(...ar)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local ar = {1}
local a = ____(
    nil,
    table.unpack(ar)
)
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const ar = [1]; const [a] = $multi(...ar)): diagnostics 1`] = `"main.ts(7,37): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (let a; [a] = $multi()): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a
local ____temp_0 = {____(nil)}
a = ____temp_0[1]
____exports.a = a
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; [a] = $multi()): diagnostics 1`] = `"main.ts(7,22): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (let a; for ([a] = $multi(1, 2); false; 1) {}): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a
do
    local ____temp_0 = {____(nil, 1, 2)}
    a = ____temp_0[1]
    ____exports.a = a
    while false do
        local ____ = 1
    end
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; for ([a] = $multi(1, 2); false; 1) {}): diagnostics 1`] = `"main.ts(7,27): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (let a; for (const [a] = $multi(1, 2); false; 1) {}): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a
do
    local a = ____(nil, 1, 2)
    while false do
        local ____ = 1
    end
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; for (const [a] = $multi(1, 2); false; 1) {}): diagnostics 1`] = `"main.ts(7,33): error TSTL: The $multi function must be called in a return statement."`;

exports[`invalid direct $multi function use (let a; if ([a] = $multi(1)) { ++a; }): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    return ...
end
local a
local ____temp_0 = {____(nil, 1)}
a = ____temp_0[1]
____exports.a = a
if ____temp_0 then
    a = a + 1
    ____exports.a = a
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; if ([a] = $multi(1)) { ++a; }): diagnostics 1`] = `"main.ts(7,26): error TSTL: The $multi function must be called in a return statement."`;
