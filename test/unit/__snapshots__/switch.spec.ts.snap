// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`switch empty fallthrough to default (0) 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local out = {}
    repeat
        local ____switch3 = 0
        local ____cond3 = ____switch3 == 1
        do
            out[#out + 1] = "default"
        end
    until true
    return out
end
return ____exports"
`;

exports[`switch empty fallthrough to default (1) 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local out = {}
    repeat
        local ____switch3 = 1
        local ____cond3 = ____switch3 == 1
        do
            out[#out + 1] = "default"
        end
    until true
    return out
end
return ____exports"
`;

exports[`switch hoisting hoisting from default clause is not duplicated when falling through 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local x = 1
    local result = ""
    repeat
        local ____switch3 = x
        local hoisted
        function hoisted(self)
            return "hoisted"
        end
        local ____cond3 = ____switch3 == 1
        if ____cond3 then
            result = hoisted(nil)
            break
        end
        ____cond3 = ____cond3 or ____switch3 == 2
        if ____cond3 then
            result = "2"
        end
        if ____cond3 then
            result = "default"
        end
        ____cond3 = ____cond3 or ____switch3 == 3
        if ____cond3 then
            result = "3"
            break
        end
        do
            result = "default"
            result = "3"
        end
    until true
    return result
end
return ____exports"
`;

exports[`switch hoisting hoisting from fallthrough clause after default is not duplicated 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local x = 1
    local result = ""
    repeat
        local ____switch3 = x
        local hoisted
        function hoisted(self)
            return "hoisted"
        end
        local ____cond3 = ____switch3 == 1
        if ____cond3 then
            result = hoisted(nil)
            break
        end
        ____cond3 = ____cond3 or ____switch3 == 2
        if ____cond3 then
            result = "2"
        end
        if ____cond3 then
            result = "default"
        end
        ____cond3 = ____cond3 or ____switch3 == 3
        if ____cond3 then
            result = "3"
            break
        end
        do
            result = "default"
            result = "3"
        end
    until true
    return result
end
return ____exports"
`;

exports[`switch produces optimal output 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local x = 0
    local out = {}
    repeat
        local ____switch3 = 0
        local ____cond3 = ____switch3 == 0 or ____switch3 == 1 or ____switch3 == 2
        if ____cond3 then
            out[#out + 1] = "0,1,2"
            break
        end
        ____cond3 = ____cond3 or ____switch3 == 3
        if ____cond3 then
            do
                out[#out + 1] = "3"
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == 4
        if ____cond3 then
            break
        end
        do
            x = x + 1
            out[#out + 1] = "default = " .. tostring(x)
            do
                out[#out + 1] = "3"
                break
            end
        end
    until true
    out[#out + 1] = tostring(x)
    return out
end
return ____exports"
`;
